/**
 * ===========================================================================
 * TEMPLATE_QuickSyncScript.js
 * ===========================================================================
 * This is a generic template for pushing record data from Airtable to a
 * custom WordPress Quick-Sync REST endpoint.
 *
 * HOW TO USE:
 * 1. DO NOT EDIT THIS FILE DIRECTLY.
 * 2. Copy the entire contents of this file.
 * 3. In your Airtable Automation, create a new "Run a script" action. This
 *    action should run AFTER the media script.
 * 4. Paste the copied code into the script editor.
 * 5. Carefully fill out the `--- CONFIGURATION ---` section below.
 *    - The `FIELD_MAP` is the most important part.
 *    - All other parts of the script are generic and should NOT be edited.
 *
 * This script handles:
 *  - Building a JSON payload based on a flexible field map.
 *  - Sending the payload to the correct WordPress endpoint.
 *  - Logging the process and providing detailed output for debugging.
 * ===========================================================================
 */

/**
 * --- CONFIGURATION ---
 * Fill out this section completely.
 */

// 1. WordPress Base URL (NO trailing slash)
const WP_BASE_URL = "https://your-domain.com"; // e.g., "https://four12global.com"

// 2. The specific route for your sync endpoint
const WP_ROUTE_SUFFIX = "/wp-json/four12/v1/your-cpt-sync"; // e.g., "/wp-json/four12/v1/series-sync"

// 3. Airtable Table Name
const TABLE_NAME = "YourTableName"; // e.g., "Series" or "Events"

// 4. Name of the Airtable Secret for WP credentials
const API_SECRET_NAME = "API-SYNC"; // This should rarely change

// 5. The Airtable field that holds the unique SKU for the record.
const SKU_FIELD = "your_sku_field"; // e.g., "series_sku"

// 6. The Airtable field that holds the WordPress Post ID (for fast-path updates).
const WP_ID_FIELD = "wp_id"; // This should rarely change

// 7. Field Map: Maps Airtable field names to the keys the WordPress plugin expects.
//    Syntax: 'Airtable Field Name': 'wp_payload_key'
const FIELD_MAP = {
  // --- Core Fields ---
  'title_from_airtable':    'post_title',
  'slug_from_airtable':     'post_name',
  'publish_date':           'post_date',
  'status':                 'post_status',

  // --- Taxonomy Fields (can be text, multi-select, or linked records) ---
  'topic_links':            'topics',
  'category':               'event-categories',

  // --- Media Fields (use the _wp_id fields populated by the media script) ---
  'featured_image_wp_id':   '_thumbnail_id',
  'banner_image_wp_id':     'banner-image',

  // --- Other Meta / Custom Fields ---
  'event_description':      'event-description',
  'seo_meta_description':   '_aioseo_description',
  'custom_permalink':       'custom_permalink_uri',
};


/**
 * --- END OF CONFIGURATION ---
 * Do not edit below this line.
 * ===========================================================================
 */

// --- Helper Functions ---
function log(msg) {
  const ts = new Date().toISOString();
  console.log(`[${ts}] ${msg}`);
}

function previewJson(obj, max = 4000) {
  return JSON.stringify(obj, null, 2).slice(0, max);
}


// --- Main Execution ---
(async () => {
  log("QuickSync Script Template: Execution started.");
  try {
    /** ---- 1. Inputs & Auth ---- */
    const cfg = input.config();
    const { recordId } = cfg;
    if (!recordId) throw new Error("Missing input 'recordId'");

    const credsPlain = await input.secret(API_SECRET_NAME);
    if (!credsPlain) throw new Error(`Secret '${API_SECRET_NAME}' not found.`);
    const basicAuthHeader = `Basic ${Buffer.from(credsPlain).toString("base64")}`;
    const endpoint = `${WP_BASE_URL.replace(/\/$/, "")}${WP_ROUTE_SUFFIX}`;

    /** ---- 2. Fetch Record ---- */
    const table = base.getTable(TABLE_NAME);
    const record = await table.selectRecordAsync(recordId);
    if (!record) throw new Error(`Record ${recordId} not found in "${TABLE_NAME}".`);
    log(`Processing Record: ${record.name} (ID: ${record.id})`);

    /** ---- 3. Build Payload ---- */
    const fields = {};
    for (const [airField, wpKey] of Object.entries(FIELD_MAP)) {
      let val = record.getCellValue(airField);
      if (val === undefined || val === null) {
        fields[wpKey] = null; // Send explicit null for deletion
        continue;
      }

      if (Array.isArray(val)) {
        fields[wpKey] = val.map(v => (typeof v === 'object' && v.name ? v.name : v));
      } else if (typeof val === 'object' && 'name' in val) {
        fields[wpKey] = val.name; // Single select / single linked record
      } else {
        fields[wpKey] = record.getCellValue(airField); // Handles numbers, text, dates etc.
      }
    }

    const sku = record.getCellValueAsString(SKU_FIELD);
    if (!sku) throw new Error(`SKU is missing or empty in field "${SKU_FIELD}".`);
    fields.sku = sku; // Ensure SKU is also inside the 'fields' object for the plugin

    const payload = {
      airtableRecordId: record.id,
      sku: sku,
      wp_id: record.getCellValue(WP_ID_FIELD) || 0,
      fields: fields,
    };

    const payloadPreview = previewJson(payload);
    log(`Payload preview (truncated):\n${payloadPreview}`);
    output.set("payloadPreview", payloadPreview);

    /** ---- 4. POST to WordPress ---- */
    log(`Hitting WP endpoint → ${endpoint}`);
    const t0 = Date.now();
    const res = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": basicAuthHeader,
      },
      body: JSON.stringify(payload),
    });
    const durationMs = Date.now() - t0;
    const bodyTxt = await res.text();

    if (!res.ok) {
      output.set("syncStatus", `HTTP_ERROR_${res.status}`);
      output.set("wpBody", bodyTxt.slice(0, 800));
      throw new Error(`WordPress responded with ${res.status} in ${durationMs} ms: ${bodyTxt.slice(0, 400)}`);
    }

    let bodyJson;
    try {
      bodyJson = JSON.parse(bodyTxt);
    } catch (e) {
      output.set("syncStatus", "JSON_PARSE_ERROR");
      throw new Error(`Cannot parse successful WP JSON response: ${bodyTxt.slice(0, 400)}`);
    }

    output.set("wpResponse", bodyJson);
    output.set("syncStatus", "Success");
    output.set("wpDurationMs", durationMs);
    log(`✅ Sync succeeded in ${durationMs} ms. Response: ${JSON.stringify(bodyJson)}`);

  } catch (err) {
    log(`❌ SCRIPT FAILED: ${err.message}`);
    output.set("scriptError", err.message);
    throw err; // Fail the Airtable automation step for visibility
  }
})();