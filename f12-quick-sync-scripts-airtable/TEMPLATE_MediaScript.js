/**
 * ===========================================================================
 * TEMPLATE_MediaScript.js
 * ===========================================================================
 * This is a generic template for syncing image attachments from an Airtable
 * record to the WordPress Media Library.
 *
 * HOW TO USE:
 * 1. DO NOT EDIT THIS FILE DIRECTLY.
 * 2. Copy the entire contents of this file.
 * 3. In your Airtable Automation, create a new "Run a script" action.
 * 4. Paste the copied code into the script editor.
 * 5. Carefully fill out the `--- CONFIGURATION ---` section below.
 *    - All other parts of the script are generic and should NOT be edited.
 *
 * This script handles:
 *  - Securely authenticating with WordPress using a secret.
 *  - Checking timestamps to avoid re-uploading unchanged images.
 *  - Looping through a configurable list of images.
 *  - Downloading from Airtable and uploading to WordPress.
 *  - Caching the new WP Media ID and URL back into your Airtable record.
 * ===========================================================================
 */

/**
 * --- CONFIGURATION ---
 * Fill out this section completely.
 */

// 1. WordPress Base URL (NO trailing slash)
const WP_BASE_URL = "https://your-domain.com"; // e.g., "https://four12global.com"

// 2. Airtable Table Name
const TABLE_NAME = "YourTableName"; // e.g., "Series" or "Events"

// 3. Name of the Airtable Secret for WP credentials
const API_SECRET_NAME = "API-SYNC"; // This should rarely change

// 4. Configuration for each image you want to sync.
//    Add or remove objects in this array as needed.
const IMAGE_FIELD_CONFIGS = [
  {
    // Example for a "Featured Image"
    airtableAttachmentField: "featured_image_attachment", // The Airtable "Attachment" field
    wpIdField: "featured_image_wp_id",                    // The Airtable "Number" field for the WP ID
    wpLinkField: "featured_image_link",                   // The Airtable "URL" or "Text" field for the WP URL
    externalCacheField: "featured_image_external",        // The Airtable "URL" or "Text" field to cache the Airtable URL
  },
  {
    // Example for a "Banner Image"
    airtableAttachmentField: "banner_image_attachment",
    wpIdField: "banner_image_wp_id",
    wpLinkField: "banner_image_link",
    externalCacheField: "banner_image_external",
  },
  // Add more image objects here if your CPT has more...
];

// 5. Airtable fields used for controlling the sync process.
const CONTROL_FIELDS = {
  // "Last Modified Time" field watching ALL your attachment fields from section 4.
  lastModifiedField: "media_last_modified",

  // "Date" field to store when this script last successfully ran.
  publishTimestampField: "media_publish_timestamp",
};

/**
 * --- END OF CONFIGURATION ---
 * Do not edit below this line.
 * ===========================================================================
 */

(async () => {
  console.log("Media Script Template: Execution started.");
  const WP_MEDIA_ENDPOINT = `${WP_BASE_URL.replace(/\/$/, "")}/wp-json/wp/v2/media`;

  /** ---- Auth & Record Context ---- */
  if (!input || !input.secret) {
    throw new Error("This script must run from an Airtable Automation with access to `input.secret`.");
  }
  const basicAuth = await input.secret(API_SECRET_NAME);
  if (!basicAuth) throw new Error(`Missing required secret: ${API_SECRET_NAME}`);
  const AUTH_HEADER = `Basic ${Buffer.from(basicAuth).toString("base64")}`;

  const { recordId } = input.config();
  if (!recordId) throw new Error("Automation did not supply a recordId in input.config()");

  const table = base.getTable(TABLE_NAME);
  const record = await table.selectRecordAsync(recordId);
  if (!record) throw new Error(`Record ${recordId} not found in table "${TABLE_NAME}"`);
  console.log(`Processing Record: ${record.name} (ID: ${record.id})`);

  /** ---- Timestamp Skip Check ---- */
  const lastMod = record.getCellValue(CONTROL_FIELDS.lastModifiedField);
  const lastPush = record.getCellValue(CONTROL_FIELDS.publishTimestampField);
  if (lastMod && lastPush && new Date(lastMod) <= new Date(lastPush)) {
    console.log("No media changes detected based on timestamps. Skipping heavy lifting.");
    return;
  }

  /** ---- Helper Functions ---- */
  async function downloadAttachment(attachment) {
    const response = await fetch(attachment.url);
    if (!response.ok) throw new Error(`Failed to download ${attachment.url}: ${response.status}`);
    return {
      blob: await response.blob(),
      filename: attachment.filename,
      contentType: response.headers.get("content-type") || "image/jpeg",
    };
  }

  async function uploadToWordPress({ blob, filename, contentType }) {
    const resp = await fetch(WP_MEDIA_ENDPOINT, {
      method: "POST",
      headers: {
        "Authorization": AUTH_HEADER,
        "Content-Disposition": `attachment; filename="${filename}"`,
        "Content-Type": contentType,
      },
      body: blob,
    });
    if (!resp.ok) {
      const txt = await resp.text();
      throw new Error(`WordPress upload error for "${filename}": ${resp.status} â€“ ${txt}`);
    }
    return await resp.json();
  }

  /** ---- Main Processing Loop ---- */
  let needsPublishStamp = false;
  const updates = {};

  for (const config of IMAGE_FIELD_CONFIGS) {
    const attachments = record.getCellValue(config.airtableAttachmentField) || [];
    const attachment = attachments[0]; // Only consider the first image

    const currentWpId = record.getCellValue(config.wpIdField);
    const cachedExtUrl = record.getCellValueAsString(config.externalCacheField);

    let action = "noop";
    if (attachment && (cachedExtUrl !== attachment.url || !currentWpId)) {
      action = "upload";
    } else if (!attachment && (currentWpId || cachedExtUrl)) {
      action = "clear";
    }

    if (action === "upload") {
      console.log(`Uploading for field "${config.airtableAttachmentField}"...`);
      try {
        const imageData = await downloadAttachment(attachment);
        const wpResponse = await uploadToWordPress(imageData);

        updates[config.wpIdField] = wpResponse.id;
        updates[config.wpLinkField] = wpResponse.source_url;
        updates[config.externalCacheField] = attachment.url;
        needsPublishStamp = true;
      } catch (e) {
        console.error(`ERROR during upload for ${config.airtableAttachmentField}: ${e.message}`);
        // Do not stamp on error, and do not update this specific field
      }
    } else if (action === "clear") {
      console.log(`Clearing fields for "${config.airtableAttachmentField}"...`);
      updates[config.wpIdField] = null;
      updates[config.wpLinkField] = null;
      updates[config.externalCacheField] = null;
      needsPublishStamp = true;
    }
  }

  /** ---- Airtable Record Update ---- */
  if (needsPublishStamp) {
    updates[CONTROL_FIELDS.publishTimestampField] = new Date().toISOString();
  }

  if (Object.keys(updates).length > 0) {
    await table.updateRecordAsync(record.id, updates);
    console.log("Record updated in Airtable with:", updates);
  } else {
    console.log("No updates were necessary for this record.");
  }

  console.log("Media Script Template: Execution finished.");
})();