This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  lib/
    media-helpers.ts
    sync-helpers.ts
  author-media.ts
  author-sync.ts
  series-media.ts
  series-sync.ts
env.d.ts
package.json
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/lib/media-helpers.ts">
/*********************************************************************
 * media-helpers.ts  –  shared “step 1” image‑sync utilities
 *
 * Usage in an entry file (e.g. series‑media.ts):
 *
 *   import { mediaSync } from './lib/media-helpers';
 *
 *   mediaSync({
 *     airtableTable: 'Series',
 *     imageFields: IMAGE_FIELDS,
 *     envMediaEndpoints: {
 *       prod:    'https://four12global.com/wp-json/wp/v2/media',
 *       staging: 'https://wordpress-1204105-5660147.cloudwaysapps.com/wp-json/wp/v2/media',
 *     },
 *     lastModifiedField:  'media_last_modified',
 *     publishTimestampField: 'media_publish_timestamp',
 *   });
 *********************************************************************/

import { buildBasicAuth } from './sync-helpers';          // already exists

/* =========  Types  ========= */
export interface ImageFieldConfig {
  /** Airtable attachment field (array of objects with .url)              */
  attachmentField:      string;
  /** Field that stores WP media ID(s) (“123, 456”)                        */
  wpIdField:            string;
  /** Field that stores WP media URL(s)                                    */
  wpUrlField:           string;
  /** Cache of the original Airtable URL(s); lets us detect a changed img  */
  airtableCacheField:   string;
  /** Optional Airtable text field for external URL                        */
  externalUrlField?:    string;
  /** Multi‑upload?  Default false (= single attachment)                   */
  isMultiple?: boolean;
}

export interface MediaSyncConfig {
  airtableTable:          string;
  envMediaEndpoints:      Record<string, string>;  // keyed by `env` input
  imageFields:            ImageFieldConfig[];
  lastModifiedField:      string;                  // “media_last_modified”
  publishTimestampField:  string;                  // “media_publish_timestamp”
  secretName?:            string;                  // default "API‑SYNC"
}

/* =========  Small helpers ========= */
const log = (m: unknown) => console.log(`[${new Date().toISOString()}]`, m);
const SECRET_DEFAULT = 'API-SYNC';

async function download(attachment: any) {
  const res = await fetch(attachment.url);
  if (!res.ok) throw new Error(`↘ download ${attachment.url} → HTTP ${res.status}`);
  return {
    blob: await res.blob() as Blob,
    filename:  attachment.filename ?? 'file',
    contentType: res.headers.get('content-type') ?? 'application/octet-stream',
    srcUrl: attachment.url,
  };
}

async function uploadToWp(
  endpoint: string,
  basicAuth: string,
  { blob, filename, contentType }: { blob: Blob; filename: string; contentType: string },
) {
  const res = await fetch(endpoint, {
    method: 'POST',
    headers: {
      Authorization: `Basic ${basicAuth}`,
      'Content-Type': contentType,
      'Content-Disposition': `attachment; filename="${filename}"`,
    },
    body: blob,
  });
  const json = await res.json();
  if (!res.ok || !json?.id) {
    throw new Error(`↗ WP upload failed ${res.status}: ${JSON.stringify(json).slice(0,200)}`);
  }
  return { id: String(json.id), url: json.source_url as string };
}

/* =========  Field‑by‑field processor ========= */
async function processImageField(
  record: any,
  spec: ImageFieldConfig,
  wpEndpoint: string,
  basicAuth: string,
  onError?: (err: Error) => void,
) {
  const a = record.getCellValue(spec.attachmentField) ?? [];
  const prevWpIds   = (record.getCellValue(spec.wpIdField)  ?? '') as string;
  const prevWpUrls  = (record.getCellValue(spec.wpUrlField) ?? '') as string;
  const prevAirtUrl = (record.getCellValue(spec.airtableCacheField) ?? '') as string;
  const externalUrl = spec.externalUrlField
    ? (record.getCellValueAsString?.(spec.externalUrlField) || '').trim()
    : '';

  // If no attachments but an external link exists → just use that
  if (a.length === 0 && externalUrl) {
    const changed = externalUrl !== prevWpUrls;
    return {
      wpIds:     null,
      wpUrls:    externalUrl,
      cacheUrls: null,
      changed,
    };
  }

  /* ----- No attachment?  Maybe clear stale WP refs ------ */
  if (a.length === 0) {
    if (prevWpIds || prevWpUrls || prevAirtUrl) {
      return { wpIds: null, wpUrls: null, cacheUrls: null, changed: true };
    }
    return { changed: false };
  }

  /* ----- SINGLE attachment (99 % of your use‑cases) ----- */
  if (!spec.isMultiple) {
    const att = a[0];
    const airtableUrl = att.url;
    if (airtableUrl === prevAirtUrl && prevWpIds) {
      // unchanged – skip
      return { changed: false };
    }
    // New file or first run
    try {
      const { blob, filename, contentType } = await download(att);
      const { id, url } = await uploadToWp(wpEndpoint, basicAuth, { blob, filename, contentType });
      return { wpIds: id, wpUrls: url, cacheUrls: airtableUrl, changed: true };
    } catch (err) {
      if (onError) onError(err as Error);
      log(`⚠️  single-upload failed ${att.url}: ${(err as Error).message}`);
      return { changed: false };
    }
  }

  /* ----- MULTI attachment ----- */
  if (spec.isMultiple) {
    const uploads: Array<{id:string; url:string}> = [];
    for (const at of a) {
      try {
        const { blob, filename, contentType } = await download(at);
        const { id, url } = await uploadToWp(wpEndpoint, basicAuth, { blob, filename, contentType });
        uploads.push({ id, url });
      } catch (err) {
        if (onError) onError(err as Error);
        log(`❌  multi‑upload failed ${at.url}: ${(err as Error).message}`);
      }
    }
    if (uploads.length) {
      return {
        wpIds: uploads.map(u => u.id).join(","),
        wpUrls: uploads.map(u => u.url).join(","),
        cacheUrls: a.map((att: any) => att.url).join(","),
        changed: true,
      };
    }
    return { changed: false };
  }
  // fallback
  return { changed: false };
}

/* =========  Orchestrator ========= */
export async function mediaSync(cfg: MediaSyncConfig, inputConfig: any) {
  let hadErrors = false;
  const {
    airtableTable,
    envMediaEndpoints,
    imageFields,
    lastModifiedField,
    publishTimestampField,
    secretName = SECRET_DEFAULT,
  } = cfg;

  // Use the passed-in inputConfig object
  const { recordId, env = 'prod' } = inputConfig;
  if (!recordId) throw new Error('Automation must pass {recordId}.');
  const wpEndpoint = envMediaEndpoints[env] ?? envMediaEndpoints['prod'];
  const basicAuth  = buildBasicAuth(await input.secret(secretName), secretName);

  const table  = base.getTable(airtableTable);
  const fields = [
    lastModifiedField,
    publishTimestampField,
    ...imageFields.flatMap(f => [
      f.attachmentField,
      f.wpIdField,
      f.wpUrlField,
      f.airtableCacheField,
    ]),
  ];
  const rec = await table.selectRecordAsync(recordId, { fields });
  if (!rec) throw new Error(`Record ${recordId} not found.`);

  /* —— Short‑circuit if nothing changed —— */
  const lastMod  = rec.getCellValue(lastModifiedField)       as string | null;
  const lastSync = rec.getCellValue(publishTimestampField)   as string | null;
  if (lastMod && lastSync && Date.parse(lastMod) <= Date.parse(lastSync)) {
    log('⏭ Images unchanged since last sync – skipping');
    return;
  }

  /* —— Process every image spec —— */
  const updates: Record<string, any> = {};
  let anyChanges = false;

  for (const spec of imageFields) {
    try {
      const r = await processImageField(rec, spec, wpEndpoint, basicAuth, (err) => { hadErrors = true; });
      if (r && r.changed) {
        updates[spec.wpIdField]          = r.wpIds   ?? null;
        updates[spec.wpUrlField]         = r.wpUrls  ?? null;
        updates[spec.airtableCacheField] = r.cacheUrls ?? null;
        anyChanges = true;
      }
    } catch (err) {
      hadErrors = true;
      log(`⚠️  ${spec.attachmentField}: ${(err as Error).message}`);
      // do NOT touch fields on error – leave stale values
    }
  }

  if (anyChanges) {
    if (!hadErrors) {
      updates[publishTimestampField] = new Date().toISOString();
    } else {
      log('⚠️  Skipping timestamp because at least one upload failed');
    }
    await table.updateRecordAsync(rec, updates);
    log('✅ Media sync complete & fields updated');
  } else {
    log('✔ No media changes detected – nothing to write');
  }
}
</file>

<file path="src/lib/sync-helpers.ts">
/*********************************************************************
 * sync-helpers.ts  –  shared utilities for Quick-Sync scripts
 * ---------------------------------------------------------------
 * Usage in a table-specific entry file (e.g. series-sync.ts):
 *
 *   import { quickSync } from './lib/sync-helpers';
 *
 *   quickSync({
 *     airtableTable: 'Series',
 *     fieldMap: FIELD_MAP,
 *     envEndpoints: {
 *       prod:    'https://four12global.com/wp-json/four12/v1/series-sync',
 *       staging: 'https://wordpress-1204105-5660147.cloudwaysapps.com/wp-json/four12/v1/series-sync',
 *
 *     },
 *   });
 *********************************************************************/

/* =========  Types  ========= */
export interface MediaSpec {
  airtableIdField: string;
  airtableLinkField?: string;
  wpKey: string;
}
export type FieldMap = Record<
  string,
  string | MediaSpec
>;

export interface QuickSyncConfig {
  airtableTable: string;
  fieldMap: FieldMap;
  envEndpoints: Record<string, string>;
  skuField:   string;
  titleField: string;
  allowedStatuses?: string[];
  secretName?:      string;
}


/* =========  Console helper ========= */
const log = (msg: unknown) =>
  console.log(`[${new Date().toISOString()}]`, msg);

/* =========  Common constants ========= */
const DEFAULT_ALLOWED_STATUSES = ['publish', 'draft', 'trash', 'private'];
const DEFAULT_SECRET_NAME      = 'API-SYNC';
const LAST_SYNCED_KEY          = 'last_synced';

/* =========  Auth helper ========= */
export function buildBasicAuth(secret: string, secretName = DEFAULT_SECRET_NAME) {
  if (!secret || !secret.includes(':'))
    throw new Error(`Secret "${secretName}" must be "user:app-password".`);
  return Buffer.from(secret).toString('base64');
}

/* =========  Airtable field utils ========= */
export function fieldsToFetch(
  map: FieldMap,
  skuField: string,
  titleField: string,
): string[] {
  const s = new Set<string>();
  for (const k in map) {
    const v = map[k];
    if (typeof v === 'string') s.add(k);
    else {
      s.add(v.airtableIdField);
      if (v.airtableLinkField) s.add(v.airtableLinkField);
    }
  }
  s.add('wp_id').add(skuField).add(titleField);
  return Array.from(s);
}

/* Clean & coerce values so WP gets primitives */
export function coerceValue(field: string, raw: any): any {
  if (raw == null) return null;

  // multiselects, linked records, lookups → array ⇢ names/strings
  if (Array.isArray(raw)) {
    return raw.map(x =>
      (typeof x === 'object' && x !== null && 'name' in x)
        ? x.name
        : String(x)
    );
  }

  // single attachment → url
  if (typeof raw === 'object' && raw.url)
    return raw.url;

  // single-select object → name
  if (typeof raw === 'object' && raw !== null && 'name' in raw)
    return raw.name;

  return raw; // plain string/number/date already fine
}

/* Build WP `fields` object */
export function buildSyncFields(record: any, map: FieldMap): Record<string, any> {
  const table = record.parentTable;         // Airtable API
  const fields: Record<string, any> = {};

  for (const src in map) {
    const mapping = map[src];

    // Simple 1⇢1 mapping
    if (typeof mapping === 'string') {
      const raw = record.getCellValue(src);
      if (mapping === 'post_status') {
        // status handled later (allowedStatuses check)
        fields.post_status = raw && raw.name ? raw.name.toLowerCase() :
                             typeof raw === 'string' ? raw.toLowerCase() : null;
      } else {
        fields[mapping] = coerceValue(src, raw);
      }
      continue;
    }

    // Media object
    const val = record.getCellValue(mapping.airtableIdField) ||
                (mapping.airtableLinkField && record.getCellValue(mapping.airtableLinkField));
    if (val) fields[mapping.wpKey] = val;
  }

  return fields;
}

/* =========  WP fetch helper ========= */
export async function postToWp(
  url: string,
  authB64: string,
  payload: any
) {
  const res = await fetch(url, {
    method:  'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization:  `Basic ${authB64}`,
    },
    body: JSON.stringify(payload),
  });
  const text = await res.text();
  if (!res.ok) {
    // Even on error, it's useful to return the status
    throw new Error(`HTTP ${res.status}: ${text.slice(0, 500)}`);
  }
  
  // Return an object with both the parsed data and the status code
  return {
    data: JSON.parse(text),
    status: res.status
  };
}

/* =========  Main orchestrator ========= */
export async function quickSync(cfg: QuickSyncConfig, inputConfig: any) {
  const {
    airtableTable,
    fieldMap,
    envEndpoints,
    skuField,
    titleField,
    allowedStatuses = DEFAULT_ALLOWED_STATUSES,
    secretName     = DEFAULT_SECRET_NAME,
  } = cfg;
  if (!skuField || !titleField)
    throw new Error('quickSync: skuField and titleField are required');

  // Use the passed-in inputConfig object
  const { recordId, env } = inputConfig;
  if (!recordId) throw new Error('Automation must pass {recordId}.');
  if (!env || !envEndpoints[env]) {
    const availableEnvs = Object.keys(envEndpoints).join(', ');
    throw new Error(`Input variable "env" is missing or invalid. Please provide one of the following: ${availableEnvs}`);
  }
  const wpUrl = envEndpoints[env];

  const syncEpoch = Math.floor(Date.now() / 1000);
  log(`Quick-Sync (${airtableTable}) start – epoch ${syncEpoch}`);

  /* ── Auth ── */
  const authSecret = await input.secret(secretName);
  const authB64    = buildBasicAuth(authSecret, secretName);

  /* ── Fetch record ── */
  const table  = base.getTable(airtableTable);
  const fieldsNeeded = fieldsToFetch(fieldMap, skuField, titleField);
  const record = await table.selectRecordAsync(recordId, { fields: fieldsNeeded });
  if (!record) throw new Error(`Record ${recordId} not found in ${airtableTable}`);

  /* ── Build fields ── */
  const fields = buildSyncFields(record, fieldMap);

// Ensure SKU & title exist
fields.sku ??= record.getCellValueAsString(skuField);

// Get the destination key for the title from the field map (e.g., 'post_title' or 'name')
const titleDestinationKey = (typeof fieldMap[titleField] === 'string')
  ? fieldMap[titleField] as string
  : null;

// Only add the title if its destination key is known and it's not already set.
if (titleDestinationKey) {
    fields[titleDestinationKey] ??= record.getCellValueAsString(titleField) || record.name;
}

fields[LAST_SYNCED_KEY] = syncEpoch;

// We still need the title for logging purposes, regardless of its key
const titleForLogging = (titleDestinationKey && fields[titleDestinationKey])
    ? fields[titleDestinationKey]
    : record.getCellValueAsString(titleField) || record.name;

  // post_status whitelist
  if (fields.post_status && !allowedStatuses.includes(fields.post_status))
    delete fields.post_status;

  /* ── Assemble payload ── */
  const payload = {
    airtableRecordId: record.id,
    sku:   fields.sku,
    wp_id: record.getCellValue('wp_id') || null,
    fields,
  };
  console.log(JSON.stringify(payload, null, 2).substring(0, 5000));
  output.set(
    'payloadSent',
    JSON.stringify(payload, null, 2).slice(0, 2500)
  );

  
/* ── POST to WP ── */
log(`POSTing to ${wpUrl}`);
// Use destructuring to get both `data` and `status` from the response
const { data, status } = await postToWp(wpUrl, authB64, payload);

/* ── Handle response ── */
const postId  = data.post_id ?? data?.data?.post_id;
const action  = data.action  ?? 'unknown';
const message = data.message ?? '';

output.set(
  'syncStatus',
  // Use the `status` variable we just received
  data && postId ? 'Success' : `HTTP_${status}`
);
output.set('action',     action);
output.set('message',    message);
output.set('postTitle',  titleForLogging); // Use our new logging variable
output.set('wpPostId',   postId ?? null);  // Coalesce undefined to null
log(`✅ WP ${action} –  ${titleForLogging}`); // Use our new logging variable
}
</file>

<file path="src/author-media.ts">
// quick-sync-scripts/src/author-media.ts

import { mediaSync, MediaSyncConfig } from './lib/media-helpers';

// This config object replaces all the hardcoded constants in the old script.
const authorMediaConfig: MediaSyncConfig = {
  // 1. Your Airtable table name
  airtableTable: 'author-speaker',

  // 2. WP Media endpoints per environment
  envMediaEndpoints: {
    prod: 'https://four12global.com/wp-json/wp/v2/media',
    // staging: 'https://your-staging-site.com/wp-json/wp/v2/media',
  },

  // 3. The fields you use to track media changes
  lastModifiedField: 'media_last_modified',
  publishTimestampField: 'media_publish_timestamp',

  // 4. One entry for the profile image
  //    This directly maps to the IMAGE_FIELDS from your old script.
  imageFields: [
    {
      attachmentField:    'profile_image_attachment',
      wpIdField:          'profile_image_wp_id',
      wpUrlField:         'profile_image_link',
      airtableCacheField: 'profile_image_external',
      isMultiple:         false, // This is a single image field
    },
  ],
};

// The single, valid call to input.config() for the entire script run.
const scriptInput = input.config();

// This one line runs the entire sync process using the config above.
mediaSync(authorMediaConfig, scriptInput);
</file>

<file path="src/author-sync.ts">
// quick-sync-scripts/src/author-sync.ts

import { quickSync, QuickSyncConfig, FieldMap } from './lib/sync-helpers';

// This is the single, valid call to input.config() for the entire script run.
const scriptInput = input.config();

// This FIELD_MAP is taken directly from your v1 script.
// This is the most important part! We map to 'name' and 'slug', not 'post_title'.
const AUTHOR_FIELD_MAP: FieldMap = {
  // Airtable Field Name  ->  WP Payload Key for a TAXONOMY TERM
  'author_title':       'name',
  'author_slug':        'slug',
  'author_description': 'as_description', // Your PHP plugin handles this
  'profile_image_wp_id':'profile_image',  // This is just a meta field for the term

  // Special case: The SKU is both a meta field and a top-level payload key.
  // The helper automatically promotes the 'sku' value to the top level.
  'sku':                'sku',
};

const authorSyncConfig: QuickSyncConfig = {
  // Airtable table name
  airtableTable: 'author-speaker',

  // The unique identifier fields in Airtable
  skuField: 'sku',
  titleField: 'author_title', // Used for logging and fallback naming

  // Your field map
  fieldMap: AUTHOR_FIELD_MAP,

  // Your endpoints
  envEndpoints: {
    prod: 'https://four12global.com/wp-json/four12/v1/author-sync',
    staging: 'https://wordpress-1204105-5660147.cloudwaysapps.com//wp-json/four12/v1/author-sync' 
  },
};

// Pass the scriptInput object to the helper function.
quickSync(authorSyncConfig, scriptInput);
</file>

<file path="src/series-media.ts">
// src/series-media.ts

import { mediaSync, MediaSyncConfig } from './lib/media-helpers';

// The single, valid call to input.config()
const scriptInput = input.config();

const seriesMediaConfig: MediaSyncConfig = {
  // 1. Your Airtable table name
  airtableTable: 'Series',

  // 2. WP Media endpoints per environment
  envMediaEndpoints: {
    prod: 'https://four12global.com/wp-json/wp/v2/media',
    // staging: 'https://your‑staging‑site.cloudwaysapps.com/wp-json/wp/v2/media',
  },

  // 3. The fields you use in Airtable to track media changes
  lastModifiedField:     'media_last_modified',
  publishTimestampField: 'media_publish_timestamp',

  // 4. One entry per image slot in your CPT
  imageFields: [
    {
      attachmentField:    'featured_image_attachment',
      wpIdField:          'featured_image_wp_id',
      wpUrlField:         'featured_image_link',
      airtableCacheField: 'featured_image_external',
      isMultiple:         false,
    },
    {
      attachmentField:    'banner_image_attachment',
      wpIdField:          'banner_image_wp_id',
      wpUrlField:         'banner_image_link',
      airtableCacheField: 'banner_image_external',
      isMultiple:         false,
    },
    {
      attachmentField:    'listing_image_attachment',
      wpIdField:          'listing_image_wp_id',
      wpUrlField:         'listing_image_link',
      airtableCacheField: 'listing_image_external',
      isMultiple:         false,
    },
    {
      attachmentField:    'no_words_image_attachment',
      wpIdField:          'no_words_image_wp_id',
      wpUrlField:         'no_words_image_link',
      airtableCacheField: 'no_words_image_external',
      isMultiple:         false,
    },
    {
      attachmentField:    'primary_cta_image_attachment',
      wpIdField:          'primary_cta_image_wp_id',
      wpUrlField:         'primary_cta_image_link',
      airtableCacheField: 'primary_cta_image_external',
      isMultiple:         false,
    },
  ],
};

// Pass the scriptInput object to the helper function.
mediaSync(seriesMediaConfig, scriptInput);
</file>

<file path="src/series-sync.ts">
import { quickSync } from './lib/sync-helpers';

const FIELD_MAP = {
  /* ── Core WP fields ───────────────────────────── */
  series_title:      'post_title',
  series_slug:       'post_name',
  long_date:         'post_date',
  website_status:    'post_status',
  series_sku:        'sku',
  excerpt:           'post_excerpt',

  /* Custom permalink (Permalink Manager) */
  series_permalink:  'custom_permalink_uri',

  /* ── Taxonomies ──────────────────────────────── */
  global_categories:      'global-categories',
  series_filter_category: 'series-categories',
  topics:                 'topics',
  series_template:        'series-templates',

  /* ── ACTIVE media (prefer ID, fallback URL) ──── */
  featured_image: {
    airtableIdField:   'featured_image_wp_id',
    airtableLinkField: 'featured_image_link',
    wpKey: '_thumbnail_id',
  },
  listing_image: {
    airtableIdField:   'listing_image_wp_id',
    airtableLinkField: 'listing_image_link',
    wpKey: 'listing-image',
  },
  no_words_image: {
    airtableIdField:   'no_words_image_wp_id',
    airtableLinkField: 'no_words_image_link',
    wpKey: 'no-words-image',
  },
  banner_image: {
    airtableIdField:   'banner_image_wp_id',
    airtableLinkField: 'banner_image_link',
    wpKey: 'banner-image',
  },
  primary_cta_image: {
    airtableIdField:   'primary_cta_image_wp_id',
    airtableLinkField: 'primary_cta_image_link',
    wpKey: 'manual1-image',
  },

  /* ── Meta / CTA / SEO etc. ───────────────────── */
  series_description_title: 'series-description_title',
  series_description:       'series-description',
  who_is_it_for:            'series-who-is-it-for',
  series_purpose:           'series-purpose',
  series_colour_1:          'series-colour-1',
  series_colour_2:          'series-colour-2',
  print_pdf_link:           'link_five',
  custom_pdf_link:          'link_ten',
  youtube_playlist:         'youtube-playlist-link',
  spotify_playlist:         'spotify-playlist-link',
  apple_playlist:           'apple-playlist-link',
  highlights_video:         'highlights-video',

  /* CTA blocks */
  primary_cta_heading: 'manual1-title',
  primary_cta_title:   'manual1-link-title',
  primary_cta_link:    'manual1-link',
  secondary_cta_heading: 'manual2-title',
  secondary_cta_title:   'manual2-link-title',
  secondary_cta_link:    'manual2-link',

  seo_description:     '_aioseo_description',
  session_title:       'custom-session-title',
  sessions_list:       'series-episode-list',
  session_list_1:      'series-episode-list-more',
  session_list_2:      'series-episode-list-3',
  session_list_3:      'series-episode-list-4',
};

// The single, valid call to input.config() for the entire script run.
const scriptInput = input.config();

quickSync({
  /* ----- Airtable table name ----- */
  airtableTable: 'Series',

  /* ----- Airtable field that holds your permanent SKU & title ----- */
  skuField:   'series_sku',
  titleField: 'series_title',

  /* ----- END per‑CPT overrides ----- */
  fieldMap: FIELD_MAP,
  envEndpoints: {
    prod:     'https://four12global.com/wp-json/four12/v1/series-sync',
    staging:  'https://wordpress-1204105-5660147.cloudwaysapps.com/wp-json/four12/v1/series-sync',
  }
}, scriptInput);
</file>

<file path="env.d.ts">
// Airtable scripting globals (injected at runtime)
declare const input:  any;
declare const output: any;
declare const base:   any;
</file>

<file path="package.json">
{
  "name": "f12-quick-sync",
  "version": "1.0.0",
  "description": "Airtable → WordPress Quick-Sync scripts",
  "type": "module",
  "repository": {
    "type": "git",
    "url": "https://github.com/Four12-Global/f12-quick-sync-project.git"
  },

  "scripts": {
    "check": "tsc --noEmit",
    "build": "esbuild src/*.ts --bundle --format=iife --target=es2017 --minify --outdir=dist",
    "watch": "esbuild src/*.ts --bundle --format=iife --target=es2017 --outdir=dist --watch"
  },

  "devDependencies": {
    "esbuild": "^0.25.8",
    "typescript": "^5.8.3",
    "@types/node": "^20.11.0"
  }
}
</file>

<file path="README.md">
# Airtable Script Templates for Quick-Sync

This directory contains master templates for the JavaScript code that runs inside Airtable Automations. Using these templates ensures a consistent, reliable, and easy-to-extend synchronization process.

**Do not edit the template files directly.** Always copy their contents to create new scripts for each CPT or Taxonomy you want to sync.

## The Two-Step Sync Process

For any given record, the sync is a two-step process within Airtable Automations:

1.  **Media Sync (Step 1):** The `TEMPLATE_MediaScript.js` runs first. Its only job is to upload image attachments to the WordPress Media Library and write the resulting WordPress Media IDs back into the Airtable record.

2.  **Data Sync (Step 2):** The `TEMPLATE_QuickSyncScript.js` runs second. It gathers all the record's data—including the Media IDs from Step 1—and sends the complete package to the custom WordPress endpoint.

This two-step approach is crucial because it ensures that when the main data sync happens, we are sending stable WordPress Media IDs, not temporary URLs.

---

## How to Use `TEMPLATE_MediaScript.js`

Follow these steps to set up the media sync for a new CPT (e.g., "Events").

1.  **Copy Template:** Open `TEMPLATE_MediaScript.js` and copy its entire contents.
2.  **Create Airtable Script:** In your Airtable base, go to **Automations**. Create a new automation or edit an existing one. Add a "Run a script" action.
3.  **Paste Code:** Paste the copied code into the Airtable script editor.
4.  **Add Input Variable:** The script requires one input variable. In the left panel, add a variable named `recordId` and set its value to the `Airtable record ID` from the automation's trigger step.
5.  **Configure:** In the script editor, carefully fill out the `--- CONFIGURATION ---` block at the top of the script.
    ```javascript
    // 1. WordPress Base URL
    const WP_BASE_URL = "https://four12global.com";

    // 2. Airtable Table Name
    const TABLE_NAME = "Events"; // Your CPT's table name

    // 3. Secret Name
    const API_SECRET_NAME = "API-SYNC";

    // 4. Image Field Configurations
    const IMAGE_FIELD_CONFIGS = [
      {
        airtableAttachmentField: "event_featured_image", // Attachment field in your Events table
        wpIdField: "event_featured_image_wp_id",         // Number field to store the WP ID
        wpLinkField: "event_featured_image_link",        // URL/Text field for the WP URL
        externalCacheField: "event_featured_image_ext",  // URL/Text field for the Airtable URL
      }
      // Add more objects if the Event CPT has more images
    ];

    // 5. Control Fields
    const CONTROL_FIELDS = {
      lastModifiedField: "event_media_last_modified", // A "Last Modified Time" field watching your attachment fields
      publishTimestampField: "event_media_publish_ts",  // A "Date" field
    };
    ```
6.  **Set Secret:** Ensure your automation has access to the `API-SYNC` secret containing your WordPress `username:application_password`.

---

## How to Use `TEMPLATE_QuickSyncScript.js`

Follow these steps to set up the main data sync. This action should run **after** the Media Script action in the same automation.

1.  **Copy Template:** Open `TEMPLATE_QuickSyncScript.js` and copy its entire contents.
2.  **Create Airtable Script:** Add a new "Run a script" action to your automation.
3.  **Paste Code:** Paste the copied code into the script editor.
4.  **Add Input Variable:** Just like before, add the `recordId` input variable.
5.  **Configure:** In the script editor, carefully fill out the `--- CONFIGURATION ---` block. The `FIELD_MAP` is the most important part.
    ```javascript
    // 1. WordPress Base URL
    const WP_BASE_URL = "https://four12global.com";

    // 2. The specific route for your sync endpoint
    const WP_ROUTE_SUFFIX = "/wp-json/four12/v1/event-sync"; // The endpoint for your CPT

    // 3. Airtable Table Name
    const TABLE_NAME = "Events";

    // 4. Secret Name
    const API_SECRET_NAME = "API-SYNC";

    // 5. The Airtable field for the unique SKU.
    const SKU_FIELD = "event_sku";

    // 6. The Airtable field for the WordPress Post ID.
    const WP_ID_FIELD = "wp_id";

    // 7. Field Map: 'Airtable Field Name': 'wp_payload_key'
    const FIELD_MAP = {
      'event_title':          'post_title',
      'event_slug':           'post_name',
      'event_categories':     'event-categories',
      'event_featured_image_wp_id': '_thumbnail_id', // Use the ID field from the media script!
      'event_description':    'event-description',
    };
    ```

## Debugging

-   Always check the **Run history** of your Airtable automation.
-   The script logs its progress to the console, which is visible in the run history.
-   The script also uses `output.set()` to provide structured results, like `payloadPreview` and `wpResponse`, which are invaluable for troubleshooting.
</file>

<file path="tsconfig.json">
{
    "compilerOptions": {
      "target": "es2017",
      "lib": ["es2017", "dom"],
      "module": "commonjs",
      "strict": true,
      "esModuleInterop": true,
      "outDir": "dist"
    },
    "include": ["src/**/*", "env.d.ts"]
  }
</file>

</files>
